#ifndef __SABER_LOG_H
#define __SABER_LOG_H
#include<iostream>
#include<stringstream>
#include<memory>
namespace saber{
	class Logger;
	class LogFormatter;
	class LogLevel{
		public:
				enum Level{
					UNKNOWN=0,
					DEBUG=1,
					INFO=2,
					WARN=3,
					ERROR=4,
					FATAL=5
				}
	}

	/**
	 *@brief class LogEvent
	 */
	class LogEvent{
			public:

					typedef std::shared_ptr<LogEvent> ptr;

					LogEvent(LogLevel::LogLevel level,
							 uint32_t line,
							 const char* file,
							 uint32_t thread_id,
							 uint32_t fiber_id,
							 uint64_t time,
							 uint32_t elapse,
							 std::shared_ptr<Logger> logger
							 );
					
					////gettter
					const LogLevel::Level getLevel() const{return m_level;}
					const uint32_t getLine() const {return m_line;}
					const char* getFile() const {return m_file;}
					const uint32_t getThreadId() const {return m_threadId;}
					const uint32_t getFiberId() const {return m_fiberId;}
					const uint64_t getTime()const{return m_time;}
					const uint32_t getElapse()const{return m_elapse;}
					std::stringstream& getMsg(){return m_msg;}
			private:

				LogLevel::LogLevel m_level=LogLevel::Level::DEBUG;

				uint32_t m_line=0;	////file line

				const char* m_file=nullptr;	////file name
				
				uint32_t m_threadId=0;	////thread id

				uint32_t m_FiberId=0;	////fiber id

				uint64_t m_time=0;		////timestamp 

				uint32_t m_elapse=0;	////program  run time

				std::stringstream m_msg; ////log message

				std::shared_ptr<Logger> m_logger;

	}

	/**
	 *@brief class LogAppender
	 */
	////base class
	class LogAppender{
		public:
				typedef std::shared_ptr<LogAppender> ptr;

				LogAppender(LogLevel:;Level level,std::shared_ptr<LogFormatter> formatter):m_level(level),m_formatter(formatter){}

				virtual ~LogAppender(){}

				virtual void log(LogLevel::Level,LogEvent::ptr&)=0;
				
				////setter
				void setFormatter(std::shared_ptr<LogFormatter>&);

		private:
				LogLevel::Level m_level=LogLevel::Level::DEBUG;	///loglevel
				std::shared_ptr<LogFormatter> m_formatter;	////formatter


	}
	////console appender
	class StdOutAppender:public LogAppender{
		public:
				typedef std::shared_ptr<StdOutAppender> ptr;
					
				void log(LogLevel::Level,LogEvent::ptr&) override;
	}

	/**
	 *@brief class LogFormatter
	 *@describe 
	 *	%m -- message
	 *	%p -- level
	 *	%r -- elapse
	 *	%c -- log name
	 *	%t -- thread id
	 *	%n -- new line
	 *	%d -- time
	 *	%f -- file name
	 *	%l -- line
	 *	%T -- Tab
	 *	%F -- fiber id
	 *	%N -- thread name
	 */
	class LogFormatter{
			public:
					typedef std:;shared_ptr<LogFormatter> ptr;
					////constructor
					LogFormatter(std::string pattern):m_pattern(pattern){}
					LogFormatter(std::string pattern,LogLevel::LogLevel level):m_pattern(pattern),m_level(level){}
					
					////core funtions
					std::string format(LogEvent::ptr,LogLevel::Level);
			private:

					LogLevel:;Level m_level=LogLevel::Level::DEBUG;
					std::string m_pattern;
	}
	/**
	 *@brief class Logger
	 */
	class Logger{
			public:
			private:
	}


};
#endif
